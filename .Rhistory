dia <- st_yankee_diamond()
plot(dia)
st_yankee_diamond <- function(){
st_polygon(list(matrix(
c(48, 0,
52, 13,
60, 21,
72, 27,
92, 25,
106, 20,
103, 0,
48, 0),
ncol = 2, byrow = T)))
}
dia <- st_yankee_diamond()
plot(dia)
st_yankee_diamond <- function(){
st_polygon(list(matrix(
c(48, 0,
52, 13,
60, 21,
72, 25,
92, 25,
106, 20,
103, 0,
48, 0),
ncol = 2, byrow = T)))
}
dia <- st_yankee_diamond()
plot(dia)
plot(pitch)
plot(dia, add=T)
st_yankee_diamond <- function(){
st_polygon(list(matrix(
c(48, 0,
52, 13,
60, 21,
72, 25,
82, 27
92, 25,
106, 20,
103, 0,
48, 0),
ncol = 2, byrow = T)))
}
st_yankee_diamond <- function(){
st_polygon(list(matrix(
c(48, 0,
52, 13,
60, 21,
72, 25,
82, 27
92, 25,
106, 20,
103, 0,
48, 0),
ncol = 2, byrow = T)))
}
st_yankee_diamond <- function(){
st_polygon(list(matrix(
c(48, 0,
52, 13,
60, 21,
72, 25,
82, 27,
92, 25,
106, 20,
103, 0,
48, 0),
ncol = 2, byrow = T)))
}
dia <- st_yankee_diamond()
plot(pitch)
plot(dia, add=T)
source('~/Documents/Computer Backup/MLS Data/ASA/create_SB_pitch.R')
create_Pitch()
create_Pitch() + geom_sf(data = dia)
?geom_sf
create_Pitch() + geom_sf(data = dia) + theme_void()
create_Pitch() + geom_sf(data = dia) + theme_minimal()
source('~/Documents/Computer Backup/MLS Data/ASA/functions/st_yankee_diamond.R')
library(ggplot2)
source('~/Documents/Computer Backup/MLS Data/ASA/functions/theme_pitch_sf.R')
create_Pitch() + geom_sf(data = dia)
create_Pitch() + geom_sf(data = dia) + theme(panel.grid.major = element_blank())
create_Pitch() + geom_sf(data = dia) + theme_minimal() + theme_pitch_sf()
create_Pitch() + geom_sf(data = dia) + panel.grid.major=element_line(colour="transparent")
create_Pitch() + geom_sf(data = dia) + theme(panel.grid.major=element_line(colour="transparent"))
View(data)
library(rearr)
library(tidyverse)
x <- read_csv(file.choose())
View(x)
table(x$Status)
out <- filter(x, Status > 0)
out
out <- select(out, Code, City)
out
View(out)
write_csv(out, "~/Documents/Computer Backup/Projects/SIS/CityCodes.csv")
library(here)
library(rio)
library(tibble)
library(dplyr)
library(tidyr)
library(broom)
library(data.table)
library(ggplot2)
library(sf)
library(car)
library(readr)
library(tidyr)
source(here("R", "functions", "all_row_combos.R"))
source(here("R", "functions", "aggregate_microdata.R"))
linked <- import(here("data", "for_models", "phl_loc_attain.csv")) %>%
as_tibble() %>%
filter(sei1 > 0 & not_hhh1 == 0) %>%
# if the address is the same in both years, the family did not move
mutate(moved = if_else(both_same == 1, 0, 1),
woman = sex1 - 1,
married = if_else(marst1 < 3, 1, 0),
#age_sq1 = age1 * age1,
#hh_n_adults1 = hh_size1 - hh_n_kids1,
kids_1_to_2 = if_else(hh_n_kids1 > 0 & hh_n_kids1 < 3, 1, 0),
kids_3_up = if_else(hh_n_kids1 >= 3, 1, 0),
# create squared term for ed % black and ed % foreign born
ed_pct_black_sq1 = ed_pct_black1 * ed_pct_black1,
ed_pct_frnbrn_sq1 = ed_pct_frnbrn1 * ed_pct_frnbrn1,
lag_pct_black_sq1 = lag_pct_black1 * lag_pct_black1,
lag_pct_frnbrn_sq1 = lag_pct_frnbrn1 * lag_pct_frnbrn1)
nested <- linked %>%
group_by(race_cat, year1) %>%
nest() %>%
filter(race_cat != "Other")
library(here)
library(here)
library(sf)
library(dplyr)
library(rio)
library(ggplot2)
source(here("R", "functions", "load_linked_sample.R"))
ed10 <- st_read(here("data", "merged_eds", "class", "Phl1910.shp"))
library("sf")
g <- st_read("~/Desktop/OCR/grids/StLouisMO_streets_corrected_corners_restored.shp")
g[g$st40 == "Broadway", "st40"] <- ""
g[g$st40 == "Broadway Ave", "st40"] <- "Broadway"
g[g$st40 == "Broadway Ave", "st40"]
librar(stringr)
library(stringr)
g$st40 <- str_replace(g$st40, "Broadway Ave","Broadway")
g$st40 <- str_replace(g$st40, "Broadway St","Broadway")
library(foreign)
?write.dbf
g <- st_drop_geometry(g)
write.dbf(g, "~/Desktop/OCR/grids/StLouisMO_streets_corrected_corners_restored.dbf")
library(here)
library(rio)
library(dplyr)
library(data.table)
library(ggplot2)
library(stringr)
# import linked data for analysis and convert vars to factors with levels
linked <- import(here("data", "analysis", "links-full-info.csv")) %>%
mutate(
move_type = factor(move_type, levels = c("Same Address", "Same Neighborhood", "Left Neighborhood", "Missing Data")),
home_type1 = factor(home_type1, levels = c("Owner", "Renter", "Not Head", "Missing Data")),
ed_custom1 = factor(ed_custom1, levels = c("Black", "Mixed - Imm.", "Mixed - U.S.", "Immigrant", "U.S. White")),
ed_custom2 = factor(ed_custom2, levels = c("Black", "Mixed - Imm.", "Mixed - U.S.", "Immigrant", "U.S. White"))
)
getwd()
library(here)
library(rio)
library(sf)
library(ggplot2)
library(dplyr)
library(mclust)
library(purrr)
library(ghibli)
source(here("R", "functions", "all_row_combos.R"))
source(here("R", "functions", "aggregate_microdata.R"))
source(here("R", "functions", "sept_flow_maps", "create_flows.R"))
library(here)
library(rio)
library(mclust)
library(dplyr)
library(purrr)
library(tidyr)
library(stringr)
library(ggplot2)
library(ggalluvial)
library(data.table)
library(sf)
library(tigris)
library(ghibli)
library(RColorBrewer)
source(here("R", "functions", "load_linked_sample.R"))
source(here("R", "functions", "all_row_combos.R"))
#source(here("R", "functions", "aggregate_microdata.R"))
source(here("R", "functions", "segregation_indices.R"))
source(here("R", "functions", "sept_flow_maps", "create_flows.R"))
#### Set up data ####
# import select variables for full microdata in each year
m10 <- load_microdata(10, formatted = F) %>%
#filter(relate == 101) %>%
select(year, relate, race, bpl, ed, overall_match, overall_match_bool, street_precleaned) %>%
mutate(
race_cat = case_when(
race == 100 & bpl < 15000 ~ "White NB",
race == 100 & bpl >= 15000 ~ "White Imm",
race %in% c(200, 210) ~ "Black",
TRUE ~ "Other"
),
street = if_else(overall_match_bool == T, overall_match, street_precleaned),
ed_street = paste0(ed, " - ", street)
)
m20 <- load_microdata(20, formatted = F) %>%
#filter(relate == 101) %>%
select(year, relate, race, bpl, ed, overall_match, overall_match_bool, street_precleaned) %>%
mutate(
race_cat = case_when(
race == 100 & bpl < 15000 ~ "White NB",
race == 100 & bpl >= 15000 ~ "White Imm",
race %in% c(200, 210) ~ "Black",
TRUE ~ "Other"
),
street = if_else(overall_match_bool == T, overall_match, street_precleaned),
ed_street = paste0(ed, " - ", street)
)
m30 <- load_microdata(30, formatted = F) %>%
#filter(relate == 101) %>%
select(year, relate, race, bpl, ed, overall_match, overall_match_bool, street_precleaned) %>%
mutate(
race_cat = case_when(
race == 100 & bpl < 15000 ~ "White NB",
race == 100 & bpl >= 15000 ~ "White Imm",
race %in% c(200, 210) ~ "Black",
TRUE ~ "Other"
),
street = if_else(overall_match_bool == T, overall_match, street_precleaned),
ed_street = paste0(ed, " - ", street)
)
m40 <- load_microdata(40, formatted = F) %>%
#filter(relate == 101) %>%
select(year, relate, race, bpl, ed, overall_match, overall_match_bool, street_precleaned) %>%
mutate(
race_cat = case_when(
race == 100 & bpl < 15000 ~ "White NB",
race == 100 & bpl >= 15000 ~ "White Imm",
race %in% c(200, 210) ~ "Black",
TRUE ~ "Other"
),
street = if_else(overall_match_bool == T, overall_match, street_precleaned),
ed_street = paste0(ed, " - ", street)
)
# import linked data for analysis and convert vars to factors with levels
linked <- import(here("data", "analysis", "links-full-info-2.csv")) %>%
mutate(
move_type = factor(move_type, levels = c("Same Address", "Short Move", "Long Move", "Missing Data")),
home_type1 = factor(home_type1, levels = c("Owner", "Renter", "Missing Data")),
# create a new variable that also includes if they were household head in time 1
head_tenure1 = factor(if_else(not_hhh1 == 1 & home_type1 != "Missing Data",
paste0("NH - ", home_type1),
as.character(home_type1)),
levels = c("Owner", "Renter", "NH - Owner", "NH - Renter", "Missing Data"))#,
# Create additionally collapsed relate category for non-heads
#non_head_cat_slim = case_when(
#  non_head_cat == "Head" ~ "Head",
#  boarder1 == 1 ~ "Boarder",
#  employee1 == 1 ~ "Employee",
#  inst1 == 1 ~ "Institution",
#  spouse1 == 1 ~ "Spouse",
#  rel_child1 == 1 ~ "Rel. Child",
#  other_fam1 == 1 ~ "Other Family",
#  TRUE ~ "Other"
#)
)
# separate into heads and non-heads in time 1
#heads <- filter(linked, not_hhh1 == 0)
#nonheads <- filter(linked, not_hhh1 == 1)
# ED polygons
ed10 <- st_read(here("data", "merged_eds", "Philadelphia_1910.shp")) %>%
mutate(year = 1910, decade = NA)
ed20 <- st_read(here("data", "merged_eds", "Philadelphia_1920.shp")) %>%
mutate(year = 1920, decade = "1910-20")
ed30 <- st_read(here("data", "merged_eds", "Philadelphia_1930.shp")) %>%
mutate(year = 1930, decade = "1920-30")
ed40 <- st_read(here("data", "merged_eds", "Philadelphia_1940.shp")) %>%
mutate(year = 1940, decade = "1930-40") %>%
st_transform(crs = st_crs(ed30))
eds <- rbind(ed10, ed20, ed30, ed40) %>%
mutate(ed = as.character(ED)) %>%
select(-ED)
# add custom ED classification based on %black and %frnbrn
eds$ed_custom <- case_when(
eds$ed_pct_b >= 25 ~ "Black Neigh.",
eds$ed_pct_b < 25 & eds$ed_pct_f >= 25 ~ "Imm. Neigh.",
eds$ed_pct_b < 25 & eds$ed_pct_f < 25 ~ "White Neigh."
)
# custom color palette for ed classes
custom_pal <- c(ghibli_palette("KikiLight")[4],
ghibli_palette("KikiLight")[3],
"lightgrey")
# scrape main profiles
scrape_ow_data("catmaps", "psn", here("data", "player_data"))
scrape_ow_data("catpax", "psn", here("data", "player_data"))
library(overwatchr)
library(here)
# scrape main profiles
scrape_ow_data("catmaps", "psn", here("data", "player_data"))
scrape_ow_data("catpax", "psn", here("data", "player_data"))
scrape_ow_data("MuskratTuck", "psn", here("data", "player_data"))
library(mclust)
citation("mclust")
library(overwatchr)
library(here)
library(overwatchr)
library(here)
scrape_ow_data("catmaps", "psn", here("data", "player_data"))
library(readr)
library(dplyr)
library(sf)
library(ggplot2)
# load most updated NYT file
nyt <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")
View(nyt)
class(nyt$date)
min(nyt$date)
unique(nyt$date)
table(nyt$date)
# load county boundaries
counties <- counties()
?counties
library(tigris)
# load county boundaries
counties <- counties()
~
getwd()
?st_as_sf
?counties
?st_as_sf
# load county boundaries
counties <- counties() %>%
st_as_sf()
names(counties)
View(counties)
# combine NYC
nyc <- filter(counties, STATEFP == 36 & NAME %in% c("New York", "Kings", "Queens", "Bronx", "Richmond"))
View(nyc)
plot(nyc$geometry)
plot(st_union(nyc)$geometry)
st_union(nyc)
st_combine(nyc)
class(st_combine(nyc))
counties <- filter(counties, geometry %in% nyc$geometry == F)
# combine NYC
nyc <- filter(counties, STATEFP == 36 & NAME %in% c("New York", "Kings", "Queens", "Bronx", "Richmond"))
counties <- filter(counties, geometry %in% nyc$geometry == F)
counties <- filter(counties, !(STATEFP == 36 & NAME %in% c("New York", "Kings", "Queens", "Bronx", "Richmond")))
nyc_cb <- tibble(STATEFP = 36, NAME = "New York City",
ALAND = sum(nyc$ALAND), AWATER = sum(nyc$AWATER),
INTPTLAT = mean(nyc$INTPTLAT), INTPTLON = mean(nyc$INTPTLON))
nyc_cb <- tibble(STATEFP = 36, NAME = "New York City",
ALAND = sum(as.numeric(nyc$ALAND)), AWATER = sum(as.numeric(nyc$AWATER)),
INTPTLAT = mean(nyc$INTPTLAT), INTPTLON = mean(nyc$INTPTLON))
nyc_cb <- tibble(STATEFP = 36, NAME = "New York City",
ALAND = sum(as.numeric(nyc$ALAND)), AWATER = sum(as.numeric(nyc$AWATER)))
plot(st_combine(nyc))
plot(st_union(nyc))
counties <- rbind(counties, nyc_cb)
# load county boundaries
counties <- counties() %>%
st_as_sf()
counties <- filter(counties, !(STATEFP == 36 & NAME %in% c("New York", "Kings", "Queens", "Bronx", "Richmond")))
counties <- bind_rows(counties, nyc_cb)
nyc_cb <- tibble(STATEFP = "36", NAME = "New York City",
ALAND = sum(as.numeric(nyc$ALAND)), AWATER = sum(as.numeric(nyc$AWATER)))
st_geometry(nyc_cb) <- st_union(nyc)
counties <- bind_rows(counties, nyc_cb)
nyc_cb <- tibble(STATEFP = "36", NAME = "New York City",
ALAND = as.character(sum(as.numeric(nyc$ALAND))),
AWATER = as.character(sum(as.numeric(nyc$AWATER))))
st_geometry(nyc_cb) <- st_union(nyc)
counties <- bind_rows(counties, nyc_cb)
View(counties)
# figure out kansas city
kc <- tigris::places(29) %>% filter(NAME == "Kansas City")
# figure out kansas city
kc <- tigris::places(29) %>%
st_as_sf() %>%
filter(NAME == "Kansas City")
quad <- filter(counties, STATEFP == 29 & NAME %in% c("Cass", "Clay", "Jasper", "Newton"))
quad <- filter(counties, STATEFP == "29" & NAME %in% c("Cass", "Clay", "Jasper", "Newton"))
quad <- filter(counties, STATEFP == 29 & NAME %in% c("Cass", "Clay", "Jasper", "Newton"))
quad <- filter(counties, STATEFP == 29)
quad <- dplyr::filter(counties, STATEFP == 29 & NAME %in% c("Cass", "Clay", "Jasper", "Newton"))
# load county boundaries
counties <- counties() %>%
st_as_sf()
# combine NYC, re-add to counties
nyc <- filter(counties, STATEFP == 36 & NAME %in% c("New York", "Kings", "Queens", "Bronx", "Richmond"))
counties <- filter(counties, !(STATEFP == 36 & NAME %in% c("New York", "Kings", "Queens", "Bronx", "Richmond")))
nyc_cb <- tibble(STATEFP = "36", NAME = "New York City",
ALAND = as.character(sum(as.numeric(nyc$ALAND))),
AWATER = as.character(sum(as.numeric(nyc$AWATER))))
st_geometry(nyc_cb) <- st_union(nyc)
counties <- rbind(counties, nyc_cb)
# load county boundaries
counties <- counties() %>%
st_as_sf() %>%
select(STATEFP, NAME)
# combine NYC, re-add to counties
nyc <- filter(counties, STATEFP == 36 & NAME %in% c("New York", "Kings", "Queens", "Bronx", "Richmond"))
counties <- filter(counties, !(STATEFP == 36 & NAME %in% c("New York", "Kings", "Queens", "Bronx", "Richmond")))
nyc_cb <- tibble(STATEFP = "36", NAME = "New York City")
st_geometry(nyc_cb) <- st_union(nyc)
counties <- rbind(counties, nyc_cb)
# figure out kansas city
kc <- tigris::places(29) %>%
st_as_sf() %>%
filter(NAME == "Kansas City") %>%
select(STATEFP, NAME)
quad <- dplyr::filter(counties, STATEFP == 29 & NAME %in% c("Cass", "Clay", "Jasper", "Newton"))
plot(quad$geometry)
quad <- dplyr::filter(counties, STATEFP == 29 & NAME %in% c("Cass", "Clay", "Jackson", "Platte"))
plot(quad$geometry)
plot(kc$geometry, col = "red", add = T)
?attach
?st_contains
st_intersects(quad, kc)
st_intersects(quad, kc, sparse = F)
st_intersection(quad, kc)
st_intersection(quad, kc)$geometry
plot(st_intersection(quad, kc)$geometry)
plot(st_intersection(quad, kc))
plot(st_disjoint(quad, kc))
plot(st_disjoint(quad, kc), prepared = F)
plot(st_difference(quad, kc))
# add KC and Joplin as separate entities
kcjo <- tigris::places(29) %>%
st_as_sf() %>%
filter(NAME %in% c("Kansas City", "Joplin")) %>%
select(STATEFP, NAME)
counties <- st_difference(counties, kcjo)
counties <- rbind(counties, kcjo)
# load county boundaries
counties <- counties() %>%
st_as_sf() %>%
select(STATEFP, NAME)
# combine NYC, re-add to counties
nyc <- filter(counties, STATEFP == 36 & NAME %in% c("New York", "Kings", "Queens", "Bronx", "Richmond"))
counties <- filter(counties, !(STATEFP == 36 & NAME %in% c("New York", "Kings", "Queens", "Bronx", "Richmond")))
nyc_cb <- tibble(STATEFP = "36", NAME = "New York City")
st_geometry(nyc_cb) <- st_union(nyc)
counties <- rbind(counties, nyc_cb)
# add KC and Joplin as separate entities
kcjo <- tigris::places(29) %>%
st_as_sf() %>%
filter(NAME %in% c("Kansas City", "Joplin")) %>%
select(STATEFP, NAME)
counties <- st_difference(counties, kcjo)
View(counties)
counties <- st_difference(counties, kcjo) %>%
select(STATEFP, NAME)
counties <- rbind(counties, kcjo)
?st_difference
# load county boundaries
counties <- counties() %>%
st_as_sf() %>%
select(STATEFP, NAME)
# combine NYC, re-add to counties
nyc <- filter(counties, STATEFP == 36 & NAME %in% c("New York", "Kings", "Queens", "Bronx", "Richmond"))
counties <- filter(counties, !(STATEFP == 36 & NAME %in% c("New York", "Kings", "Queens", "Bronx", "Richmond")))
nyc_cb <- tibble(STATEFP = "36", NAME = "New York City")
st_geometry(nyc_cb) <- st_union(nyc)
counties <- rbind(counties, nyc_cb)
counties <- st_difference(counties, kcjo) %>%
select(STATEFP, NAME)
counties <- st_difference(counties, kcjo) %>%
select(STATEFP, NAME) %>%
unique()
# load county boundaries
counties <- counties() %>%
st_as_sf() %>%
select(STATEFP, NAME)
# combine NYC, re-add to counties
nyc <- filter(counties, STATEFP == 36 & NAME %in% c("New York", "Kings", "Queens", "Bronx", "Richmond"))
counties <- filter(counties, !(STATEFP == 36 & NAME %in% c("New York", "Kings", "Queens", "Bronx", "Richmond")))
nyc_cb <- tibble(STATEFP = "36", NAME = "New York City")
st_geometry(nyc_cb) <- st_union(nyc)
counties <- rbind(counties, nyc_cb)
# add KC and Joplin as separate entities
kcjo <- tigris::places(29) %>%
st_as_sf() %>%
filter(NAME %in% c("Kansas City", "Joplin")) %>%
select(STATEFP, NAME)
counties <- st_difference(counties, kcjo) %>%
select(STATEFP, NAME) %>%
unique()
counties <- rbind(counties, kcjo)
# save boundaries
st_write(counties, "nyt_boundaries.shp")
library(here)
here::set_here("~/Documents/Computer Backup/Repos/modeling_covid/")
here::set_here("~/Documents/Computer Backup/Repos/modeling_covid")
dr_here()
here::set_here("~/Documents/Computer Backup/Repos/modeling-covid")
# save boundaries
st_write(counties, here("data", "nyt_boundaries.shp"))
setwd("~/Documents/Computer Backup/Repos/modeling-covid")
here()
# save boundaries
st_write(counties, "~/Documents/Computer Backup/Repos/modeling-covid/data/nyt_boundaries.shp")
